// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/sapcc/kubernikus/pkg/apis/kubernikus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KlusterLister helps list Klusters.
type KlusterLister interface {
	// List lists all Klusters in the indexer.
	List(selector labels.Selector) (ret []*v1.Kluster, err error)
	// Klusters returns an object that can list and get Klusters.
	Klusters(namespace string) KlusterNamespaceLister
	KlusterListerExpansion
}

// klusterLister implements the KlusterLister interface.
type klusterLister struct {
	indexer cache.Indexer
}

// NewKlusterLister returns a new KlusterLister.
func NewKlusterLister(indexer cache.Indexer) KlusterLister {
	return &klusterLister{indexer: indexer}
}

// List lists all Klusters in the indexer.
func (s *klusterLister) List(selector labels.Selector) (ret []*v1.Kluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Kluster))
	})
	return ret, err
}

// Klusters returns an object that can list and get Klusters.
func (s *klusterLister) Klusters(namespace string) KlusterNamespaceLister {
	return klusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KlusterNamespaceLister helps list and get Klusters.
type KlusterNamespaceLister interface {
	// List lists all Klusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Kluster, err error)
	// Get retrieves the Kluster from the indexer for a given namespace and name.
	Get(name string) (*v1.Kluster, error)
	KlusterNamespaceListerExpansion
}

// klusterNamespaceLister implements the KlusterNamespaceLister
// interface.
type klusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Klusters in the indexer for a given namespace.
func (s klusterNamespaceLister) List(selector labels.Selector) (ret []*v1.Kluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Kluster))
	})
	return ret, err
}

// Get retrieves the Kluster from the indexer for a given namespace and name.
func (s klusterNamespaceLister) Get(name string) (*v1.Kluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kluster"), name)
	}
	return obj.(*v1.Kluster), nil
}
