// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KlusterPhase kluster phase
//
// swagger:model KlusterPhase
type KlusterPhase string

func NewKlusterPhase(value KlusterPhase) *KlusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KlusterPhase.
func (m KlusterPhase) Pointer() *KlusterPhase {
	return &m
}

const (

	// KlusterPhasePending captures enum value "Pending"
	KlusterPhasePending KlusterPhase = "Pending"

	// KlusterPhaseCreating captures enum value "Creating"
	KlusterPhaseCreating KlusterPhase = "Creating"

	// KlusterPhaseRunning captures enum value "Running"
	KlusterPhaseRunning KlusterPhase = "Running"

	// KlusterPhaseUpgrading captures enum value "Upgrading"
	KlusterPhaseUpgrading KlusterPhase = "Upgrading"

	// KlusterPhaseTerminating captures enum value "Terminating"
	KlusterPhaseTerminating KlusterPhase = "Terminating"
)

// for schema
var klusterPhaseEnum []interface{}

func init() {
	var res []KlusterPhase
	if err := json.Unmarshal([]byte(`["Pending","Creating","Running","Upgrading","Terminating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		klusterPhaseEnum = append(klusterPhaseEnum, v)
	}
}

func (m KlusterPhase) validateKlusterPhaseEnum(path, location string, value KlusterPhase) error {
	if err := validate.EnumCase(path, location, value, klusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this kluster phase
func (m KlusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKlusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this kluster phase based on context it is used
func (m KlusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
