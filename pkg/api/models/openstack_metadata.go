// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OpenstackMetadata openstack metadata
// swagger:model OpenstackMetadata
type OpenstackMetadata struct {

	// availability zones
	AvailabilityZones []AvailabilityZone `json:"availabilityZones"`

	// flavors
	Flavors []Flavor `json:"flavors"`

	// key pairs
	KeyPairs []*KeyPair `json:"keyPairs"`

	// routers
	Routers []*Router `json:"routers"`

	// security groups
	SecurityGroups []*SecurityGroup `json:"securityGroups"`
}

// Validate validates this openstack metadata
func (m *OpenstackMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlavors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyPairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenstackMetadata) validateAvailabilityZones(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityZones) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailabilityZones); i++ {

		if err := m.AvailabilityZones[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZones" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *OpenstackMetadata) validateFlavors(formats strfmt.Registry) error {

	if swag.IsZero(m.Flavors) { // not required
		return nil
	}

	for i := 0; i < len(m.Flavors); i++ {

		if err := m.Flavors[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flavors" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *OpenstackMetadata) validateKeyPairs(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyPairs) { // not required
		return nil
	}

	for i := 0; i < len(m.KeyPairs); i++ {
		if swag.IsZero(m.KeyPairs[i]) { // not required
			continue
		}

		if m.KeyPairs[i] != nil {
			if err := m.KeyPairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keyPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenstackMetadata) validateRouters(formats strfmt.Registry) error {

	if swag.IsZero(m.Routers) { // not required
		return nil
	}

	for i := 0; i < len(m.Routers); i++ {
		if swag.IsZero(m.Routers[i]) { // not required
			continue
		}

		if m.Routers[i] != nil {
			if err := m.Routers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenstackMetadata) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenstackMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenstackMetadata) UnmarshalBinary(b []byte) error {
	var res OpenstackMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
