// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/sapcc/kubernikus/pkg/api/models"
)

// TerminateClusterHandlerFunc turns a function with the right signature into a terminate cluster handler
type TerminateClusterHandlerFunc func(TerminateClusterParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn TerminateClusterHandlerFunc) Handle(params TerminateClusterParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// TerminateClusterHandler interface for that can handle valid terminate cluster params
type TerminateClusterHandler interface {
	Handle(TerminateClusterParams, *models.Principal) middleware.Responder
}

// NewTerminateCluster creates a new http.Handler for the terminate cluster operation
func NewTerminateCluster(ctx *middleware.Context, handler TerminateClusterHandler) *TerminateCluster {
	return &TerminateCluster{Context: ctx, Handler: handler}
}

/*TerminateCluster swagger:route DELETE /api/v1/clusters/{name} terminateCluster

Terminate the specified cluser

*/
type TerminateCluster struct {
	Context *middleware.Context
	Handler TerminateClusterHandler
}

func (o *TerminateCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTerminateClusterParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
