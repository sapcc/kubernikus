<%
VERSIONS = [
  '1.24.5',
  '1.23.11',
  '1.22.14',
  '1.21.5',
  '1.20.8',
  '1.19.11',
  '1.18.10',
  '1.17.13',
  '1.16.14',
  '1.15.9',
  '1.14.5',
  '1.13.9'
]

REGIONS = {
  "ap-ae-1": { continent: 'silver', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-ae-1a', oidc: '9a2d0e1181194fb1bca52e7951666bc3'},
  "ap-au-1": { continent: 'silver', install: 'manual'   , e2e: 'manual', nodepool_avz: 'ap-au-1a', oidc: 'f34304c03d2147cc964470c31d00ce97' },
  "ap-cn-1": { continent: 'silver', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-cn-1b', oidc: 'e83ddace725b4c5da605e3f66d266f2c' },
  "ap-jp-1": { continent: 'silver', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-jp-1a', oidc: 'b505497ca03e4942a2d0aa50dfbdc7a0' },
  "ap-jp-2": { continent: 'bronze', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-jp-2a', oidc: 'f34b8aa879334a7fb20e1b96cb1c576e' },
  "ap-sa-1": { continent: 'silver', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-sa-1a', oidc: '436297dc67b9428f97da11227dc070ec' },
  "ap-sa-2": { continent: 'bronze', install: 'terraform', e2e: 'terraform', nodepool_avz: 'ap-sa-2a', oidc: '37c3822fe4194ab586d9625d81b9d532' },
  "eu-de-1": { continent: 'gold',   install: 'manual'   , e2e: 'manual', nodepool_avz: 'eu-de-1d', oidc: 'd7df5ce6c37643e49b3c93528c29818b' },
  "eu-de-2": { continent: 'gold',   install: 'manual'   , e2e: 'manual', nodepool_avz: 'eu-de-2b', oidc: '57da32d8d50d49a9a9fbbe6b890e9e13' },
  "eu-nl-1": { continent: 'gold',   install: 'manual'   , e2e: 'terraform', nodepool_avz: 'eu-nl-1a', oidc: 'd9b056a6762649f684a8a02b30f38324' },
  "la-br-1": { continent: 'silver', install: 'terraform', e2e: 'terraform', nodepool_avz: 'la-br-1b', oidc: 'b33ac00cb0004d50bb34eb4e4cbbeb54' },
  "na-ca-1": { continent: 'bronze', install: 'terraform', e2e: 'terraform', nodepool_avz: 'na-ca-1b', oidc: 'b7269ea1dde54a6383453ab69f25cce4' },
  "na-us-1": { continent: 'gold',   install: 'manual'   , e2e: 'manual', nodepool_avz: 'na-us-1b', oidc: '040ed45cb5d8403790cf341a26c50601' },
  "na-us-2": { continent: 'gold',   install: 'terraform', e2e: 'terraform', nodepool_avz: 'na-us-2b', oidc: 'fc0f2b8450e1444197609800c8b5c4cb' },
  "na-us-3": { continent: 'bronze', install: 'terraform', e2e: 'terraform', nodepool_avz: 'na-us-3a', oidc: 'aa579369ca944a41bccb76f49f20924f' },
  "qa-de-1": { continent: 'infra',  install: 'terraform', e2e: 'terraform', nodepool_avz: 'qa-de-1a', oidc: 'ce5462b173184391a9b47b486fabe580'},
  "master":  { continent: "infra",  install: 'virtual'  , e2e: 'virtual', nodepool_avz: 'eu-nl-1a', oidc: 'a8b6853024494e1eb56136025b04866b' }
}

GROUPS             = REGIONS.values.map{ |v| v[:continent]}.uniq
DEPLOYABLE_REGIONS = REGIONS.select{ |k, v| ["terraform", "manual"].include?(v[:install]) }
%>

<% REGIONS.each do |region, meta| %>
auth_<%= region %>: &auth_<%= region %>
  KUBELOGON_USER:     ((unified-kubernetes-auth/default.username))
  KUBELOGON_PASSWORD: ((unified-kubernetes-auth/default.password))
  KUBERNIKUS_NAME: k-<%= region %>
  KUBERNIKUS_URL: https://kubernikus.admin.<%= region == :master ? "eu-nl-1": region %>.cloud.sap
  VAULT_ROLE_ID: ((auth.role_id))
  VAULT_SECRET_ID: ((auth.secret_id))

auth_e2e_<%= region %>: &auth_e2e_<%= region %>
  CP_KLUSTER: k-<%= region %>
  CP_KUBERNIKUS_URL: https://kubernikus.admin.<%= region == :master ? "eu-nl-1" : region %>.cloud.sap
  CP_OS_PROJECT_DOMAIN_NAME: ccadmin
  VAULT_ROLE_ID: ((auth.role_id))
  VAULT_SECRET_ID: ((auth.secret_id))
<% if meta[:oidc] %>
  CP_OIDC_AUTH_URL: https://kubernikus.admin.<%= region == :master ? "eu-nl-1" : region %>.cloud.sap/auth/login
  CP_OIDC_CONNECTOR_ID: <%= meta[:oidc] %>
  CP_OIDC_USERNAME: ((unified-kubernetes-auth/default.username))
  CP_OIDC_PASSWORD: ((unified-kubernetes-auth/default.password))
<% end %>
  KUBERNIKUS_NAME: e2e
  OS_PROJECT_DOMAIN_NAME: ccadmin
<% if meta[:nodepool_avz] %>
  NODEPOOL_AVZ: <%= meta[:nodepool_avz] %>
<% end %>
<% if meta[:e2e] == "terraform" %>
  OS_AUTH_URL: https://identity-3.<%= region %>.cloud.sap/v3
  OS_USERNAME: kubernikus-pipeline
  OS_PASSWORD: ((keystone-user-password/kubernikus-pipeline))
  OS_USER_DOMAIN_NAME: Default
  OS_PROJECT_NAME: kubernikus_e2e
  OS_REGION_NAME: <%= region %>
  KUBERNIKUS_URL: https://kubernikus.<%= region %>.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus
<% end %>
<% if meta[:e2e] == "manual" %>
  OS_AUTH_URL: https://identity-3.<%= region %>.cloud.sap/v3
  OS_USERNAME: T175B19A704E280EC
  OS_PASSWORD: ((ldap-user-password/T175B19A704E280EC))
  OS_USER_DOMAIN_NAME: ccadmin
  OS_PROJECT_NAME: kubernikus-e2e
  OS_REGION_NAME: <%= region %>
  KUBERNIKUS_URL: https://kubernikus.<%= region %>.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus
<% end %>
<% if meta[:e2e] == "virtual" %>
  OS_AUTH_URL: https://identity-3.eu-nl-1.cloud.sap/v3
  OS_USERNAME: T175B19A704E280EC
  OS_PASSWORD: ((ldap-user-password/T175B19A704E280EC))
  OS_USER_DOMAIN_NAME: ccadmin
  OS_PROJECT_NAME: kubernikus-e2e
  OS_REGION_NAME: eu-nl-1
  KUBERNIKUS_URL: https://kubernikus-master.eu-nl-1.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus-<%= region %>
<% end %>
<% end %>

<% Dir.glob(File.join(File.dirname(__FILE__), "task*.yaml")).sort.map{|f| File.basename(f, ".yaml")}.each do |task| %>
<%= task %>: &<%= task%>
  <%= File.read(File.join(File.dirname(__FILE__), "#{task}.yaml")).gsub("\n", "\n  ") %>
<% end %>

slack: &slack
  on_success: { put: slack-alert, inputs: [], params: {alert_type: fixed } }
  on_failure: { put: slack-alert, inputs: [], params: {alert_type: broke } }
  on_abort:   { put: slack-alert, inputs: [], params: {alert_type: broke } }
  on_error:   { put: slack-alert, inputs: [], params: {alert_type: broke } }


resources:
  - name: docs.git
    type: git
    source:
      uri: https://github.com/sapcc/kubernikus.git
      paths:
        - docs/**
        - contrib/kubernikus-docs-builder/**
        - swagger.yaml
        - Dockerfile.kubernikus-docs2

  - name: kubernikus.git
    type: git
    source:
      uri: https://github.com/sapcc/kubernikus.git

  - name: docs-builder.image
    type: registry-image
    source:
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/kubernikus-docs-builder
      tag: latest

  - name: kubernikus.image
    type: registry-image
    source:
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/kubernikus
      tag: latest

  - name: kubernikusctl.release
    type: github-release
    source:
      owner: sapcc
      repository: kubernikus
      access_token: ((github-access-token/sapcc-bot))

  - name: secrets.git
    icon: key-variant
    type: git-proxy
    webhook_token: aldhjalkdhahdjkahdjkhjadhjadhkjadlkjhAAdd
    check_every: 1h
    source:
      uri:         git@github.wdf.sap.corp:cc/secrets.git
      private_key: ((github-private-key/cc-secrets))
      branch:      master
      depth: 1

  - name: helm-charts.git
    type: git
    icon: github-circle
    source:
      uri:    https://github.com/sapcc/helm-charts.git
      branch: master
      paths:  [ openstack/kubernikus/ ]

  - name: slack-alert
    type: slack-alert
    icon: slack
    source:
      url: ((slack-webhook-url/kubernikus-ci))
      channel: '#kubernikus-ci'

  - name: slack-notification
    type: slack-notification
    icon: slack
    source:
      url: ((slack-webhook-url/kubernikus-ci))

<% GROUPS.each do |group| %>
  - name: <%= group %>.tag
    type: time-version-resource
    check_every: 525600h # basically never (only when triggered by a job)
    source:
      group: <%= group %>
      pipeline: kubernikus # we do this so we don't get versions from other pipelines

<% REGIONS.select{ |k, v| v[:continent] == group }.each do |region, meta| %>
<% if ["terraform", "manual"].include? meta[:install] %>
  - name: <%= region %>.release
    type: release
    check_every: never
    source: { region: <%= region %>, tenso_password: ((keystone-user-password/tenso-prod)) }
    expose_build_created_by: true
<% end %>
<% end %>
<% end %>

  - name: hourly
    type: time
    source: {interval: 1h}

  - name: all-versions.trigger
    type: time-version-resource
    check_every: 525600h
    source:
      pipeline: kubernikus

resource_types:
  - name: slack-alert
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror/arbourd/concourse-slack-alert-resource

  - name: slack-notification
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror/cfcommunity/slack-notification-resource
      tag: latest

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-2.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-2.cloud.sap/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy
      tag: 0.5.0

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-release-resource
      tag: v2.latest

jobs:
  - name: docs
    serial: true
    plan:
      - get: docs.git
        trigger: true
      - task: build
        privileged: true
        config:
          <<: *task_oci_build
        input_mapping: { context: docs.git }
        params:
          DOCKERFILE: context/Dockerfile.kubernikus-docs2
      - put: docs-builder.image
        params:
          image: image/image.tar
  - name: build
    serial: true
    plan:
      - in_parallel:
        - get: kubernikus.git
          trigger: true
        - get: docs-builder.image
          passed: [docs]
      - task: args
        config:
          <<: *task_build_args
      - task: build
        privileged: true
        config:
          <<: *task_oci_build
        input_mapping: { context: kubernikus.git }
        params:
          DOCKERFILE: context/Dockerfile.kubernikus
          BUILD_ARGS_FILE: context/build-args.txt
      - put: kubernikus.image
        params:
          image: image/image.tar
          additional_tags: kubernikus.git/.git/ref

  - name: master
    serial: true
    plan:
      - in_parallel:
        - get: secrets.git
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [build]
          trigger: true
      - in_parallel:
        - task: kubernikus
          config:
            <<: *task_helm_kubernikus
          params:
            REGION: eu-nl-1
            CONTEXT: k-master
            <<: *auth_master
        - task: kubernikus-dex
          config:
            <<: *task_helm_kubernikus-dex
          params:
            REGION: eu-nl-1
            CONTEXT: k-master
            <<: *auth_master
    <<: *slack

  - name: cli
    plan:
      - in_parallel:
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [build]
          trigger: true
      - task: build
        file: kubernikus.builds/ci/task_cli.yaml
      - put: kubernikusctl.release
        params:
          name: binaries/tag
          tag: binaries/tag
          tag_prefix: v
          commitish: binaries/commitish
          globs:
            - binaries/kubernikusctl*
        get_params:
          globs: []
    <<: *slack

  - name: whitesource
    plan:
      - in_parallel:
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [build]
          trigger: true
      - task: build
        file: kubernikus.builds/ci/task_whitesource.yaml
        params:
          API_KEY: ((whitesource-auth/credentials.api-key))
          USER_KEY: ((whitesource-auth/credentials.user-key))
          PROJECT_NAME: CCloud Kubernikus
          PRODUCT_TOKEN: ((whitesource-auth/credentials.product-token))
    <<: *slack

  - name: all-versions
    serial: true
    plan:
      - put: all-versions.trigger

<% VERSIONS.each_with_index do |version, index| %>
  - name: e2e-<%= version %>
    serial: true
    plan:
      - in_parallel:
        - get: secrets.git
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [master]
          trigger: true
        - get: all-versions.trigger
          trigger: true
          passed: [all-versions]
      - task: e2e_tests
        config:
          <<: *task_e2e_tests
        timeout: 2h
        params:
          KLUSTER_VERSION: "<%= version %>"
          KLUSTER_CIDR: "100.<%= 100+index %>.0.0/16"
          ISOLATE_TEST: "true"
          KLUSTER_OS_IMAGES: flatcar-stable-amd64,flatcar-beta-amd64
          <<: *auth_e2e_master
    <<: *slack
<% end %>

  - name: prod
    serial: true
    plan:
      - get: kubernikus.builds
        resource: kubernikus.git
        passed: [e2e-<%= VERSIONS[0] %>]
      - task: changes
        config:
          <<: *task_github_compare_url


<% GROUPS.each do |group| %>
  - name: <%= group %>
    serial: true
    plan:
      - in_parallel:
        - get: helm-charts.git
          trigger: true
        - get: secrets.git
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [prod]
          trigger: true
        - put: <%= group %>.tag

<% REGIONS.select{ |k, v| v[:continent] == group }.each do |region, meta| %>
<% if ["terraform", "manual"].include? meta[:install] %>

  - name: seed_<%= region %>
    serial: true
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          passed: [<%= group %>]
          trigger: true
        - get: secrets.git
          passed: [<%= group %>]
        - get: helm-charts.git
          passed: [<%= group %>]
      - task: seed
        config:
          <<: *task_helm_seed
        input_mapping:
          charts.git: helm-charts.git
        params:
          REGION: <%= region %>
          CONTEXT: <%= region %>
          <<: *auth_<%= region %>
    <<: *slack

  - name: deploy_<%= region %>
    serial: true
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          trigger: true
          passed: [seed_<%= region %>]
        - get: secrets.git
          passed: [seed_<%= region %>]
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [<%= group %>]
      - in_parallel:
        - task: kubernikus_<%= region %>
          config:
            <<: *task_helm_kubernikus
          params:
            REGION: <%= region %>
            CONTEXT: k-<%= region %>
            <<: *auth_<%= region %>
          ensure:
            put: <%= region %>.release
        - task: kubernikus-dex_<%= region %>
          config:
            <<: *task_helm_kubernikus-dex
          params:
            REGION: <%= region %>
            CONTEXT: k-<%= region %>
            <<: *auth_<%= region %>
    <<: *slack

  - name: soak_<%= region %>
    serial: true
    build_logs_to_retain: 168
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          trigger: true
          passed: [deploy_<%= region %>]
        - get: kubernikus.builds
          resource: kubernikus.git
          passed: [deploy_<%= region %>]
        - get: hourly
          trigger: true
      - task: e2e_tests
        config:
          <<: *task_e2e_tests
        timeout: 45m
        params:
          <<: *auth_e2e_<%= region %>
<% if region == :'qa-de-1' %>
          KLUSTER_OS_IMAGES: flatcar-stable-amd64,flatcar-beta-amd64
<% end %>
        on_failure:
          put: slack-notification
          params:
            channel: '#kubernikus-ci'
            text: Soak tests in <%= region %> failed
            text_file: test-result/content
            attachments:
              - text: $TEXT_FILE_CONTENT
                color: "#d00000"
                footer: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
                footer_icon: https://ci.concourse-ci.org/public/images/favicon-failed.png

    on_success: { put: slack-alert, inputs: [], params: {alert_type: fixed } }
    on_abort:   { put: slack-alert, inputs: [], params: {alert_type: broke } }
    on_error:   { put: slack-alert, inputs: [], params: {alert_type: broke } }

<% end %>
<% end %>
<% end %>

groups:
  - name: deploy
    jobs:
      - docs
      - build
      - master
      - cli
      - whitesource
      - all-versions
<% VERSIONS.each do |version| %>
      - e2e-<%= version %>
<% end %>
      - prod
<% GROUPS.each do |group| %>
      - <%= group %>
<% end %>

<% DEPLOYABLE_REGIONS.each do |region, meta| %>
  - name: <%= region %>
    jobs:
      - <%= meta.fetch(:continent) %>
      - seed_<%= region %>
      - deploy_<%= region %>
      - soak_<%= region %>
<% end %>

  - name: world
    jobs:
      - master
      - cli
      - whitesource
      - all-versions
<% VERSIONS.each do |version| %>
      - e2e-<%= version %>
<% end %>
      - prod
<% GROUPS.each do |group| %>
      - <%= group %>
<% end %>
<% DEPLOYABLE_REGIONS.each do |region, meta| %>
      - seed_<%= region %>
      - deploy_<%= region %>
      - soak_<%= region %>
<% end %>
