<%
REGIONS = {
  "ap-ae-1": { continent: 'ASIA',     install: 'terraform', e2e: 'terraform' },
  "ap-au-1": { continent: 'ASIA',     install: 'manual'   , e2e: 'manual'    },
  "ap-cn-1": { continent: 'ASIA',     install: 'terraform', e2e: 'terraform' },
  "ap-jp-1": { continent: 'ASIA',     install: 'terraform', e2e: 'terraform' },
  "ap-jp-2": { continent: 'ASIA',     install: 'terraform', e2e: 'terraform' },
  "ap-sa-1": { continent: 'ASIA',     install: 'terraform', e2e: 'terraform' },
  "eu-de-1": { continent: 'EMEA',     install: 'manual'   , e2e: 'manual'    },
  "eu-de-2": { continent: 'EMEA',     install: 'manual'   , e2e: 'manual'    },
  "eu-nl-1": { continent: 'EMEA',     install: 'manual'   , e2e: 'terraform' },
  "eu-ru-1": { continent: 'EMEA',     install: 'terraform', e2e: 'terraform' },
  "la-br-1": { continent: 'AMERICAS', install: 'terraform', e2e: 'terraform' },
  "na-ca-1": { continent: 'AMERICAS', install: 'terraform', e2e: 'terraform' },
  "na-us-1": { continent: 'AMERICAS', install: 'manual'   , e2e: 'manual'    },
  "na-us-2": { continent: 'AMERICAS', install: 'terraform', e2e: 'terraform' },
  "na-us-3": { continent: 'AMERICAS', install: 'terraform', e2e: 'terraform' },
  "qa-de-1": { continent: 'INFRA',    install: 'terraform', e2e: 'terraform', nodepool_avz: 'qa-de-1a' },
  "master":  { continent: "INFRA",    install: 'virtual'  , e2e: 'virtual'   }
}

GROUPS             = REGIONS.values.map{ |v| v[:continent]}.uniq
DEPLOYABLE_REGIONS = REGIONS.select{ |k, v| ["terraform", "manual"].include?(v[:install]) }
%>

<% REGIONS.each do |region, meta| %>
auth_<%= region %>: &auth_<%= region %>
  KUBELOGON_USER:     ((KUBELOGON_USER))
  KUBELOGON_PASSWORD: ((KUBELOGON_PASSWORD))
  KUBERNIKUS_NAME: k-<%= region %>
  KUBERNIKUS_URL: https://k-<%= region %>.admin.cloud.sap

auth_e2e_<%= region %>: &auth_e2e_<%= region %>
  CP_KLUSTER: k-<%= region %>
  CP_KUBERNIKUS_URL: https://k-<%= region %>.admin.cloud.sap
  CP_OS_PROJECT_DOMAIN_NAME: ccadmin
  KUBERNIKUS_NAME: e2e
  OS_PROJECT_DOMAIN_NAME: ccadmin
<% if meta[:nodepool_avz] %>
  NODEPOOL_AVZ: <%= meta[:nodepool_avz] %>
<% end %>
<% if meta[:e2e] == "terraform" %>
  OS_AUTH_URL: https://identity-3.<%= region %>.cloud.sap/v3
  OS_USERNAME: kubernikus-pipeline
  OS_PASSWORD: ((kubernikus-pipeline-password))
  OS_USER_DOMAIN_NAME: Default
  OS_PROJECT_NAME: kubernikus_e2e
  OS_REGION_NAME: <%= region %>
  KUBERNIKUS_URL: https://kubernikus.<%= region %>.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus
<% end %>
<% if meta[:e2e] == "manual" %>
  OS_AUTH_URL: https://identity-3.<%= region %>.cloud.sap/v3
  OS_USERNAME: ((kubernikus-prod-username))
  OS_PASSWORD: ((kubernikus-prod-password))
  OS_USER_DOMAIN_NAME: ccadmin
  OS_PROJECT_NAME: kubernikus-e2e
  OS_REGION_NAME: <%= region %>
  KUBERNIKUS_URL: https://kubernikus.<%= region %>.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus
<% end %>
<% if meta[:e2e] == "virtual" %>
  OS_AUTH_URL: https://identity-3.eu-nl-1.cloud.sap/v3
  OS_USERNAME: ((kubernikus-prod-username))
  OS_PASSWORD: ((kubernikus-prod-password))
  OS_USER_DOMAIN_NAME: ccadmin
  OS_PROJECT_NAME: kubernikus-e2e
  OS_REGION_NAME: eu-nl-1
  KUBERNIKUS_URL: https://kubernikus-master.eu-nl-1.cloud.sap
  CP_OS_PROJECT_NAME: kubernikus-<%= region %>
<% end %>
<% end %>

<% Dir.glob(File.join(File.dirname(__FILE__), "task*.yaml")).sort.map{|f| File.basename(f, ".yaml")}.each do |task| %>
<%= task %>: &<%= task%>
  <%= File.read(File.join(File.dirname(__FILE__), "#{task}.yaml")).gsub("\n", "\n  ") %>
<% end %>

slack: &slack
  on_success: { put: slack-alert, inputs: [], params: {alert_type: fixed } }
  on_failure: { put: slack-alert, inputs: [], params: {alert_type: broke } }
  on_abort:   { put: slack-alert, inputs: [], params: {alert_type: broke } }
  on_error:   { put: slack-alert, inputs: [], params: {alert_type: broke } }


resources:
  - name: kubernikusctl.release
    type: github-release
    source:
      owner: sapcc
      repository: kubernikus
      access_token: ((github-com-access-token))

  - name: master.builds
    type: gh-status
    icon: github-circle
    source:
      username: sapcc-bot
      password: ((github-com-access-token))
      owner:    sapcc
      repo:     kubernikus
      access_token: ((github-com-access-token))
      branch: master
      depth: 1

  - name: secrets.git
    icon: key-variant
    type: git
    webhook_token: aldhjalkdhahdjkahdjkhjadhjadhkjadlkjhAAdd
    check_every: 1h
    source:
      uri:         git@github.wdf.sap.corp:cc/secrets.git
      private_key: ((secrets-ssh-key))
      branch:      master
      depth: 1

  - name: tiller-version.git
    icon: key-variant
    type: git
    webhook_token: aldhjalkdhahdjkahdjkhjadhjadhkjadlkjhAAdd
    check_every: 1h
    source:
      uri:         git@github.wdf.sap.corp:cc/secrets.git
      private_key: ((secrets-ssh-key))
      branch:      master
      depth: 1
      paths: [ kubernikus/tiller.version, kubernikus/*/tiller.version ]

  - name: helm-charts.git
    type: git
    icon: github-circle
    source:
      uri:    https://github.com/sapcc/helm-charts.git
      branch: master
      paths:  [ openstack/kubernikus/ ]

  - name: slack-alert
    type: slack-alert
    icon: slack
    source:
      url: ((slack-webhook-url))
      channel: '#kubernikus-ci'

  - name: slack-notification
    type: slack-notification
    icon: slack
    source:
      url: ((slack-webhook-url))

<% GROUPS.each do |group| %>
  - name: <%= group %>.tag
    type: time-version-resource
    check_every: 525600h # basically never (only when triggered by a job)
<% end %>

  - name: hourly
    type: time
    source: {interval: 1h}

resource_types:
  - name: time-version
    type: docker-image
    source:
      repository: hub.global.cloud.sap/concourse/time-version-resource
      tag: v2
  - name: slack-alert
    type: docker-image
    source:
      repository: arbourd/concourse-slack-alert-resource
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

  - name: gh-status
    type: docker-image
    source:
      repository: hub.global.cloud.sap/concourse/ghstatus-resource
      tag: latest
  - name: time-version-resource
    type: docker-image
    source:
      repository: hub.global.cloud.sap/concourse/time-version-resource
      tag: v2

jobs:
  - name: tiller_master
    plan:
      - in_parallel:
        - get: tiller-version.git
          trigger: true
      - in_parallel:
        - task: master
          config:
            <<: *task_tiller
          timeout: 10m
          params:
            REGION: "k-master"
            <<: *auth_master
    <<: *slack

  - name: master
    serial: true
    plan:
      - in_parallel:
        - get: secrets.git
        - get: kubernikus.builds
          resource: master.builds
          trigger: true
      - in_parallel:
        - task: kubernikus
          config:
            <<: *task_helm_kubernikus
          params:
            REGION: "k-master"
            <<: *auth_master
        - task: kubernikus-dex
          config:
            <<: *task_helm_kubernikus-dex
          params:
            REGION: "eu-nl-1"
            CONTEXT: "k-master"
            <<: *auth_master
    <<: *slack

  - name: cli
    plan:
      - in_parallel:
        - get: kubernikus.builds
          resource: master.builds
          trigger: true
      - task: build
        file: kubernikus.builds/ci/task_cli.yaml
      - put: kubernikusctl.release
        params:
          name: binaries/tag
          tag: binaries/tag
          tag_prefix: v
          commitish: binaries/commitish
          globs:
            - binaries/kubernikusctl*
        get_params:
          globs: []
    <<: *slack

  - name: whitesource
    plan:
      - in_parallel:
        - get: kubernikus.builds
          resource: master.builds
          trigger: true
      - task: build
        file: kubernikus.builds/ci/task_whitesource.yaml
        params:
          API_KEY: ((whitesource-api-key))
          USER_KEY: ((whitesource-user-key))
          PROJECT_NAME: CCloud Kubernikus
          PRODUCT_TOKEN: ((whitesource-product-token))
    <<: *slack

  - name: e2e
    serial: true
    plan:
      - in_parallel:
        - get: secrets.git
        - get: kubernikus.builds
          resource: master.builds
          passed: [master]
          trigger: true
      - task: e2e_tests
        config:
          <<: *task_e2e_tests
        timeout: 2h
        params:
          <<: *auth_e2e_master
    <<: *slack

  - name: prod
    serial: true
    plan:
      - get: kubernikus.builds
        resource: master.builds
        passed: [e2e]
      - task: changes
        config:
          <<: *task_github_compare_url


<% GROUPS.each do |group| %>
  - name: <%= group %>
    serial: true
    plan:
      - in_parallel:
        - get: helm-charts.git
          trigger: true
        - get: secrets.git
        - get: kubernikus.builds
          resource: master.builds
          passed: [prod]
          trigger: true
        - put: <%= group %>.tag

  - name: admin_<%= group %>
    serial: true
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          passed: [ <%= group %> ]
          trigger: true
        - get: secrets.git
          passed: [ <%= group %> ]
        - get: kubernikus.builds
          resource: master.builds
          passed: [<%= group %>]
      - in_parallel:
<% REGIONS.select{ |k, v| v[:continent] == group }.each do |region, meta| %>
        - task: k-<%= region %>
          config:
            <<: *task_helm-admin_kubernikus
          params:
            REGION: admin
            CONTEXT: admin
            KUBERNIKUS_NAME: k-<%= region %>
            KUBELOGON_USER:     ((KUBELOGON_USER))
            KUBELOGON_PASSWORD: ((KUBELOGON_PASSWORD))
<% end %>
    <<: *slack

<% REGIONS.select{ |k, v| v[:continent] == group }.each do |region, meta| %>
<% if ["terraform", "manual"].include? meta[:install] %>

  - name: seed_<%= region %>
    serial: true
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          passed: [admin_<%= group %>]
          trigger: true
        - get: secrets.git
          passed: [admin_<%= group %>]
        - get: helm-charts.git
          passed: [<%= group %>]
      - task: seed
        config:
          <<: *task_helm_seed
        input_mapping:
          charts.git: helm-charts.git
        params:
          REGION: <%= region %>
          CONTEXT: <%= region %>
          <<: *auth_<%= region %>
    <<: *slack

  - name: tiller_<%= region %>
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          trigger: true
          passed: [seed_<%= region %>]
        - get: tiller-version.git
          trigger: true
      - in_parallel:
        - task: k-<%= region %>
          config:
            <<: *task_tiller
          timeout: 10m
          params:
            REGION: <%= region %>
            CONTEXT: k-<%= region %>
            <<: *auth_<%= region %>
    <<: *slack

  - name: deploy_<%= region %>
    serial: true
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          trigger: true
          passed: [tiller_<%= region %>]
        - get: secrets.git
          passed: [seed_<%= region %>]
        - get: kubernikus.builds
          resource: master.builds
          passed: [admin_<%= group %>]
      - in_parallel:
        - task: kubernikus_<%= region %>
          config:
            <<: *task_helm_kubernikus
          params:
            REGION: <%= region %>
            CONTEXT: k-<%= region %>
            <<: *auth_<%= region %>
        - task: kubernikus-dex_<%= region %>
          config:
            <<: *task_helm_kubernikus-dex
          params:
            REGION: <%= region %>
            CONTEXT: k-<%= region %>
            <<: *auth_<%= region %>
    <<: *slack

  - name: soak_<%= region %>
    serial: true
    build_logs_to_retain: 168
    plan:
      - in_parallel:
        - get: <%= group %>.tag
          trigger: true
          passed: [deploy_<%= region %>]
        - get: kubernikus.builds
          resource: master.builds
          passed: [deploy_<%= region %>]
        - get: hourly
          trigger: true
      - task: e2e_tests
        config:
          <<: *task_e2e_tests
        timeout: 45m
        params:
          <<: *auth_e2e_<%= region %>
        on_failure:
          put: slack-notification
          params:
            channel: '#kubernikus-ci'
            text: Soak tests in <%= region %> failed
            text_file: test-result/content
            attachments:
              - text: $TEXT_FILE_CONTENT
                color: "#d00000"
                footer: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
                footer_icon: https://ci.concourse-ci.org/public/images/favicon-failed.png

    on_success: { put: slack-alert, inputs: [], params: {alert_type: fixed } }
    on_abort:   { put: slack-alert, inputs: [], params: {alert_type: broke } }
    on_error:   { put: slack-alert, inputs: [], params: {alert_type: broke } }

<% end %>
<% end %>
<% end %>

groups:
  - name: deploy
    jobs:
      - master
      - cli
      - whitesource
      - tiller_master
      - e2e
      - prod
<% GROUPS.each do |group| %>
      - <%= group %>
      - admin_<%= group %>
<% end %>

<% DEPLOYABLE_REGIONS.each do |region, meta| %>
  - name: <%= region %>
    jobs:
      - <%= meta.fetch(:continent) %>
      - admin_<%= meta.fetch(:continent) %>
      - seed_<%= region %>
      - tiller_<%= region %>
      - deploy_<%= region %>
      - soak_<%= region %>
<% end %>

  - name: WORLD
    jobs:
      - master
      - cli
      - whitesource
      - tiller_master
      - e2e
      - prod
<% GROUPS.each do |group| %>
      - <%= group %>
      - admin_<%= group %>
<% end %>
<% DEPLOYABLE_REGIONS.each do |region, meta| %>
      - seed_<%= region %>
      - tiller_<%= region %>
      - deploy_<%= region %>
      - soak_<%= region %>
<% end %>