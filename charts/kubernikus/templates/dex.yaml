{{/* vim: set filetype=gotexttmpl: */ -}}
{{- if .Values.dex.enabled -}}
apiVersion: "apps/v1"
kind: Deployment
metadata:
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
  name: kubernikus-api-dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubernikus-api-dex
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: kubernikus-api-dex
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/dex-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: kubernikus-api-dex
      containers:
      - image: {{ .Values.dex.image | quote }}
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
        ports:
        - name: http
          containerPort: 8082
        env:
        - name: LDAP_CONFIG_BIND_PW
          valueFrom:
            secretKeyRef:
              name: kubernikus-api-dex
              key: bindPW
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
           fieldRef:
             fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /keys
            port: 8082
          initialDelaySeconds: 3
          timeoutSeconds: 2
        readinessProbe:
          httpGet:
            path: /keys
            port: 8082
          initialDelaySeconds: 3
          timeoutSeconds: 2
        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
      volumes:
      - name: config
        configMap:
          name: kubernikus-api-dex
          items:
          - key: config.yaml
            path: config.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: kubernikus-api-dex
  labels:
    app: kubernikus-api-dex
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8082
    name: http
  selector:
    app: kubernikus-api-dex
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/tls-acme: "true"
    disco: "true"
  name: kubernikus-api-dex
  namespace: {{ default .Release.Namespace .Values.namespaceOverride }}
spec:
  rules:
  - host: {{ include "oidc.issuer" . | quote }}
    http:
      paths:
      - path: /
        backend:
          serviceName: kubernikus-api-dex
          servicePort: 80
  tls:
  - hosts:
    - {{ include "oidc.issuer" . | quote }}
    secretName: kubernikus-api-dex-tls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernikus-api-dex
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kubernikus-api-dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources identity must be able to create customresourcedefinitions.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kubernikus-api-dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernikus-api-dex
subjects:
- kind: ServiceAccount
  name: kubernikus-api-dex   # Service account assigned to the dex pod.
  namespace: {{ .Release.Namespace }}  # The namespace dex is running in.
{{ end -}}
