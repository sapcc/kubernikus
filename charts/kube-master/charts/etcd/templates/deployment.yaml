{{/* vim: set filetype=gotexttmpl: */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fullname" . }}
  labels:
    app: {{ include "fullname" . }}
data:
  bootstrap.sh: |-
    #!/bin/sh
    if [ ! -d /var/lib/etcd/new.etcd ]; then
        mkdir /var/lib/etcd/new.etcd
    fi
    if [ -d /var/lib/etcd/member ]; then
        mv /var/lib/etcd/member /var/lib/etcd/new.etcd/member
    fi
    while true;
    do
      wget http://localhost:8080/initialization/status -S -O status;
      STATUS=`cat status`;
      case $STATUS in
      "New")
            wget http://localhost:8080/initialization/start -S -O - ;;
      "Progress")
            sleep 1;
            continue;;
      "Failed")
            continue;;
      "Successful")
            . /bootstrap/etcd.sh
            ;;
      esac;
    done
  etcd.sh: |-
    #!/bin/sh
    if [ ! -d /var/lib/etcd/new.etcd ]; then
        mkdir /var/lib/etcd/new.etcd
    fi
    if [ -d /var/lib/etcd/member ]; then
        mv /var/lib/etcd/member /var/lib/etcd/new.etcd/member
    fi

    exec etcd \
      --name=kubernikus \
      --data-dir=/var/lib/etcd/new.etcd \
{{- if .Values.secure.enabled }}
      --cert-file=/etc/kubernetes/certs/tls-etcd.pem \
      --key-file=/etc/kubernetes/certs/tls-etcd-key.pem \
      --client-cert-auth=true \
      --trusted-ca-file=/etc/kubernetes/certs/etcd-clients-ca.pem \
      --advertise-client-urls=https://${ETCD_IP}:2379 \
      --listen-client-urls=https://0.0.0.0:2379 \
      --listen-metrics-urls=http://0.0.0.0:8081
{{- else }}
      --advertise-client-urls=http://${ETCD_IP}:2379 \
      --listen-client-urls=http://0.0.0.0:2379 \
      --listen-metrics-urls=http://0.0.0.0:8081
{{- end }}
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
  etcd.conf.yaml: |-
    name: kubernikus
    initial-cluster: default=http://127.0.0.1:2380
{{- end }}
---
{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: "apps/v1"
{{- else }}
apiVersion: "extensions/v1beta1"
{{- end }}
kind: Deployment
metadata:
  name: {{ include "fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ include "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "fullname" . }}
        release: {{ .Release.Name }}
        component: etcd
{{- if .Values.backup.enabled }}
      annotations:
        prometheus.io/scrape: "true"
{{- end }}
    spec:
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: bootstrap
          configMap:
            name: {{ include "fullname" . }}
            defaultMode: 0700
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
        - name: etcd-config-file
          configMap:
            name: {{ include "fullname" . }}
            defaultMode: 0644
            items:
            - key: etcd.conf.yaml
              path: etcd.conf.yaml
{{- if eq .Values.backup.storageProvider "S3" }}
        - name: credentials-aws
          secret:
            secretName: {{ include "fullname" . }}-aws
            items:
            - key: access-key-id
              path: accessKeyID
            - key: region
              path: region
            - key: secret-access-key
              path: secretAccessKey
{{- end }}
{{- end }}
{{- if .Values.secure.enabled }}
        - name: certs-etcd
          secret:
            secretName: {{ include "master.fullname" . }}-secret
            items:
              - key: etcd-clients-ca.pem
                path: etcd-clients-ca.pem
              - key: tls-etcd-ca.pem
                path: tls-etcd-ca.pem
              - key: tls-etcd.pem
                path: tls-etcd.pem
              - key: tls-etcd-key.pem
                path: tls-etcd-key.pem
              - key: etcd-clients-backup.pem
                path: etcd-clients-backup.pem
              - key: etcd-clients-backup-key.pem
                path: etcd-clients-backup-key.pem
        - name: certs-backup
          secret:
            secretName: {{ include "master.fullname" . }}-secret
            items:
              - key: tls-etcd-ca.pem
                path: tls-etcd-ca.pem
              - key: etcd-clients-ca.pem
                path: etcd-clients-ca.pem
              - key: etcd-clients-backup.pem
                path: etcd-clients-backup.pem
              - key: etcd-clients-backup-key.pem
                path: etcd-clients-backup-key.pem
{{- end }}
      containers:
        - name: etcd
          ports:
          - containerPort: 2379
            name: etcd
            protocol: TCP
          image: "{{ include "etcd.image" . }}"
          env:
            - name: ETCD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          command:
            - /bootstrap/{{ if .Values.backup.enabled }}bootstrap.sh{{ else }}etcd.sh{{ end }}
          volumeMounts:
            - mountPath: /var/lib/etcd
              name: data
            - mountPath: /bootstrap
              name: bootstrap
{{- if .Values.secure.enabled }}
            - mountPath: /etc/kubernetes/certs
              name: certs-etcd
              readOnly: true
{{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -ec
                {{- if .Values.secure.enabled }}
                - ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/certs/tls-etcd-ca.pem --cert=/etc/kubernetes/certs/etcd-clients-backup.pem --key=/etc/kubernetes/certs/etcd-clients-backup-key.pem --insecure-transport=false endpoint health
                {{- else }}
                - ETCDCTL_API=3 etcdctl get foo
                {{- end }}
            initialDelaySeconds: 300
            periodSeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -ec
                {{- if .Values.secure.enabled }}
                - ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/certs/tls-etcd-ca.pem --cert=/etc/kubernetes/certs/etcd-clients-backup.pem --key=/etc/kubernetes/certs/etcd-clients-backup-key.pem --insecure-transport=false endpoint health
                {{- else }}
                - ETCDCTL_API=3 etcdctl get foo
                {{- end }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.backup.enabled }}
        - name: backup
          command:
            - {{ if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}/{{ end }}etcdbrctl
            - server
            - --schedule={{ .Values.backup.schedule }}
            {{- if .Values.backup.maxBackups }}
            - --max-backups={{ .Values.backup.maxBackups }}
            {{- end }}
            - --data-dir=/var/lib/etcd/new.etcd
            - --storage-provider={{ .Values.backup.storageProvider | default "Swift" }}
            {{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
            - --delta-snapshot-period={{ .Values.backup.deltaSnapshotPeriod }}s
            - --garbage-collection-period={{ .Values.backup.garbageCollectionPeriod }}s
            {{- else }}
            - --delta-snapshot-period-seconds={{ .Values.backup.deltaSnapshotPeriod }}
            - --garbage-collection-period-seconds={{ .Values.backup.garbageCollectionPeriod }}
            {{- end }}
            - --garbage-collection-policy={{ .Values.backup.garbageCollectionPolicy }}
            {{- if .Values.secure.enabled }}
            - --cacert=/etc/kubernetes/certs/tls-etcd-ca.pem
            - --cert=/etc/kubernetes/certs/etcd-clients-backup.pem
            - --key=/etc/kubernetes/certs/etcd-clients-backup-key.pem
            - --insecure-transport=false
            {{- else }}
            - --insecure-transport=true
            {{- end }}
          image: "{{ include "etcdBackup.image" . }}"
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
          securityContext:
            runAsUser: 0
{{- end }}
          ports:
            - containerPort: 8080
              # the name is important here, so that we get metrics
              name: metrics
              protocol: TCP
          env:
{{- if eq .Values.backup.storageProvider "S3" }}
            - name: STORAGE_CONTAINER
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}-aws
                  key: bucket-name
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
            - name: AWS_APPLICATION_CREDENTIALS
              value: /etc/aws/credentials
{{- else }}
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}-aws
                  key: region
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}-aws
                  key: secret-access-key
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}-aws
                  key: access-key-id
{{- end }}
{{- else if eq .Values.backup.storageProvider "Swift" }}
            - name: STORAGE_CONTAINER
              value: {{ .Values.storageContainer }}
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}
                  key: openstack-auth-url
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}
                  key: openstack-username
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}
                  key: openstack-password
            - name: OS_DOMAIN_NAME
              value: kubernikus
            - name: OS_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "fullname" . }}
                  key: openstack-project-id
{{- end }}
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              value: {{ include "fullname" . }}
{{- end }}
          volumeMounts:
            - mountPath: /var/lib/etcd
              name: data
{{- if .Values.secure.enabled }}
            - mountPath: /etc/kubernetes/certs
              name: certs-backup
              readOnly: true
{{- end }}
{{- if (semverCompare ">= 1.23-0" .Values.version.kubernetes) }}
            - name: etcd-config-file
              mountPath: /var/etcd/config
{{- if eq .Values.backup.storageProvider "S3" }}
            - name: credentials-aws
              mountPath: "/etc/aws/credentials"
              readOnly: true
{{- end }}
{{- end }}
          resources:
{{ toYaml .Values.backup.resources | indent 12 }}
{{- end }}
