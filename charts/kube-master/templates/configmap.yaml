{{/* vim: set filetype=gotexttmpl: */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "master.fullname" . }}
  labels:
    release: {{ .Release.Name }}
data:
  kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
      - name: local
        cluster:
           certificate-authority: /etc/kubernetes/certs/tls-ca.pem
           server: https://{{ include "master.fullname" . }}:{{ .Values.advertisePort }}
    contexts:
      - name: local
        context:
          cluster: local
          user: local
    current-context: local
    users:
      - name: local
        user:
          client-certificate: /etc/kubernetes/certs/kube-client.pem
          client-key: /etc/kubernetes/certs/kube-client.key
  local-kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
      - name: local
        cluster:
           certificate-authority: /etc/kubernetes/certs/tls-ca.pem
           server: https://127.0.0.1:{{ .Values.advertisePort }}
    contexts:
      - name: local
        context:
          cluster: local
          user: local
    current-context: local
    users:
      - name: local
        user:
          client-certificate: /etc/kubernetes/certs/kube-client.pem
          client-key: /etc/kubernetes/certs/kube-client.key
  api-liveness-probe.py: |-
    #!/usr/bin/python
    import requests, os, os.path, sys
    try:
      for line in requests.get('http://' + os.environ['ETCD_HOST'] + ':' + os.environ['ETCD_BACKUP_PORT'] + '/metrics', timeout=1).text.splitlines():
        if line.startswith('etcdbr_restoration_duration_seconds_count{succeeded="true"}'):
            restore_count=line.split(" ")[-1]
            if os.path.isfile("/tmp/last"):
              with open("/tmp/last", "r") as f:
                last = int(f.read())
                if last < int(restore_count):
                  sys.exit("restore detected")
            with open("/tmp/last", "w") as f:
              f.write(restore_count)
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(0)
