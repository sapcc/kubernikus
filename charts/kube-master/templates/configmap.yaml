{{/* vim: set filetype=gotexttmpl: */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "master.fullname" . }}
  labels:
    release: {{ .Release.Name }}
data:
  kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
      - name: local
        cluster:
           certificate-authority: /etc/kubernetes/certs/tls-ca.pem
           server: https://{{ include "master.fullname" . }}:{{ .Values.advertisePort }}
    contexts:
      - name: local
        context:
          cluster: local
          user: local
    current-context: local
    users:
      - name: local
        user:
          client-certificate: /etc/kubernetes/certs/kube-client.pem
          client-key: /etc/kubernetes/certs/kube-client.key
  local-kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
      - name: local
        cluster:
           certificate-authority: /etc/kubernetes/certs/tls-ca.pem
           server: https://127.0.0.1:{{ .Values.advertisePort }}
    contexts:
      - name: local
        context:
          cluster: local
          user: local
    current-context: local
    users:
      - name: local
        user:
          client-certificate: /etc/kubernetes/certs/kube-client.pem
          client-key: /etc/kubernetes/certs/kube-client.key
{{- if (semverCompare ">= 1.20" .Values.version.kubernetes) }}
  csi-kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
      - name: local
        cluster:
           certificate-authority: /etc/kubernetes/certs/tls-ca.pem
           server: https://{{ include "master.fullname" . }}:{{ .Values.advertisePort }}
    contexts:
      - name: local
        context:
          cluster: local
          user: local
    current-context: local
    users:
      - name: local
        user:
          client-certificate: /etc/kubernetes/certs/csi-client.pem
          client-key: /etc/kubernetes/certs/csi-client.key
{{- end }}
  api-liveness-probe.py: |-
    #!/usr/bin/python
    import requests, os, os.path, sys
    try:
      for line in requests.get('http://' + os.environ['ETCD_HOST'] + ':' + os.environ['ETCD_BACKUP_PORT'] + '/metrics', timeout=1).text.splitlines():
        if line.startswith('etcdbr_restoration_duration_seconds_count{succeeded="true"}'):
            restore_count=line.split(" ")[-1]
            if os.path.isfile("/tmp/last"):
              with open("/tmp/last", "r") as f:
                last = int(f.read())
                if last < int(restore_count):
                  sys.exit("restore detected")
            with open("/tmp/last", "w") as f:
              f.write(restore_count)
      if not os.path.exists("/tmp/last"):
        with open("/tmp/last", "w") as f:
          f.write("0")
    except requests.exceptions.RequestException as e:
      print e
      sys.exit(0)
{{- if .Values.audit.enabled }}
  audit-policy.yaml: |-
    apiVersion: audit.k8s.io/v1
    kind: Policy
    rules:
    - level: None
      userGroups:
      - system:nodes
    - level: None
      users:
      - gardener
      - kubelet
      - system:kube-controller-manager
      - system:kube-scheduler
      - system:gardener-resource-manager
      - system:kube-aggregator
      - system:kube-proxy
      - system:apiserver
      - system:serviceaccount:garden:gardener-controller-manager
      - system:serviceaccount:garden:gardener-metrics-exporter
      - system:serviceaccount:kube-system:generic-garbage-collector
      - system:serviceaccount:kube-system:namespace-controller
      - garden.sapcloud.io:monitoring
      - garden.sapcloud.io:monitoring:prometheus
      - garden.sapcloud.io:monitoring:kube-state-metrics
      - gardener.cloud:monitoring
      - gardener.cloud:monitoring:prometheus
      - gardener.cloud:monitoring:kube-state-metrics
    - level: None
      nonResourceURLs:
      - /healthz*
      - /version
      - /openapi/*
      - /swagger* # Swagger endpoint is deprecated with https://github.com/kubernetes/kubernetes/pull/73148
    - level: None
      resources:
      - group: ""
        resources: ["events"]
    - level: None
      verbs: ["get", "list", "watch"]
    - level: Metadata
  fluent.conf: |-
    <source>
      @type tail
      path /var/log/audit.log
      read_from_head true
      pos_file /var/log/audit.log.pos
      tag apiserver.audit
      <parse>
        @type json
      </parse>
    </source>

    <filter apiserver.audit>
      @type record_transformer
      <record>
        kluster "{{ include "master.fullname" . }}"
      </record>
    </filter>

    <match apiserver.audit>
      @type elasticsearch
      hosts "{{ .Values.audit.endpoint }}"
      logstash_format true
      user "#{ENV['AUDIT_USERNAME']}"
      password "#{ENV['AUDIT_PASSWORD']}"
      index_name logstash-%Y.%m.%d
    </match>
{{- end }}
