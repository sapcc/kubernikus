{{/* vim: set filetype=gotexttmpl: */ -}}
apiVersion: "extensions/v1beta1"
kind: Deployment
metadata:
  name: {{ include "master.fullname" . }}-apiserver
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  replicas: {{ .Values.api.replicaCount }}
  strategy:
    rollingUpdate:
      maxUnavailable: {{ if eq (toString .Values.api.replicaCount) "1" }}0{{else}}1{{end}}
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ include "master.fullname" . }}-apiserver
  template:
    metadata:
      labels:
        app: {{ include "master.fullname" . }}-apiserver
        release: {{ .Release.Name }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      volumes:
        - name: certs
          secret:
            secretName: {{ .Values.certsSecretName | default (include "master.fullname" .) }}
            items:
              - key: apiserver-clients-ca.pem
                path: apiserver-clients-ca.pem
              - key: etcd-clients-ca.pem
                path: etcd-clients-ca.pem
              - key: etcd-clients-apiserver.pem
                path: etcd-clients-apiserver.pem
              - key: etcd-clients-apiserver-key.pem
                path: etcd-clients-apiserver-key.pem
              - key: kubelet-clients-ca-key.pem
                path: kubelet-clients-ca-key.pem
              - key: kubelet-clients-apiserver.pem
                path: kubelet-clients-apiserver.pem
              - key: kubelet-clients-apiserver-key.pem
                path: kubelet-clients-apiserver-key.pem
              - key: tls-ca.pem
                path: tls-ca.pem
              - key: tls-apiserver.pem
                path: tls-apiserver.pem
              - key: tls-apiserver-key.pem
                path: tls-apiserver-key.pem
        - name: cloudprovider
          secret:
            secretName: {{ include "master.fullname" . }}
            items:
              - key: openstack.config
                path: openstack.config
      containers:
        - name: apiserver
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args:
            - /hyperkube
            - apiserver
            - --etcd-servers=http://{{ include "etcd.fullname" . }}:2379
            - --secure-port=6443
            - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
            - --allow-privileged=true
            - --authorization-mode=RBAC
            - --cloud-config=/etc/kubernetes/cloudprovider/openstack.config
            - --cloud-provider=openstack
            - --experimental-bootstrap-token-auth=true
            - --runtime-config=rbac.authorization.k8s.io/v1alpha1,extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true
            - --service-cluster-ip-range={{ .Values.serviceCIDR }}
            #Cert Spratz
            - --client-ca-file=/etc/kubernetes/certs/apiserver-clients-ca.pem
            - --etcd-cafile=/etc/kubernetes/certs/etcd-clients-ca.pem
            - --etcd-certfile=/etc/kubernetes/certs/etcd-clients-apiserver.pem
            - --etcd-keyfile=/etc/kubernetes/certs/etcd-clients-apiserver-key.pem
            - --kubelet-certificate-authority=/etc/kubernetes/certs/kubelet-clients-ca-key.pem
            - --kubelet-client-certificate=/etc/kubernetes/certs/kubelet-clients-apiserver.pem
            - --kubelet-client-key=/etc/kubernetes/certs/kubelet-clients-apiserver-key.pem
            - --tls-ca-file=/etc/kubernetes/certs/tls-ca.pem
            - --tls-cert-file=/etc/kubernetes/certs/tls-apiserver.pem
            - --tls-private-key-file=/etc/kubernetes/certs/tls-apiserver-key.pem
            # --tls-sni-cert-key=/etc/kubernetes/certs/tls-sni.pem,/etc/kubernetes/certs/tls-sni.key
          volumeMounts:
            - mountPath: /etc/kubernetes/certs
              name: certs
              readOnly: true
            - mountPath: /etc/kubernetes/cloudprovider
              name: cloudprovider
              readOnly: true
          resources:
{{ toYaml .Values.api.resources | indent 12 }}
