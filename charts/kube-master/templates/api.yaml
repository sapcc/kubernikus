{{/* vim: set filetype=gotexttmpl: */ -}}
{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: "apps/v1"
{{- else }}
apiVersion: "extensions/v1beta1"
{{- end }}
kind: Deployment
metadata:
  name: {{ include "master.fullname" . }}-apiserver
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  replicas: {{ .Values.api.replicaCount }}
  strategy:
    rollingUpdate:
      maxUnavailable: {{ if eq (toString .Values.api.replicaCount) "1" }}0{{else}}1{{end}}
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ include "master.fullname" . }}-apiserver
  template:
    metadata:
      labels:
        app: {{ include "master.fullname" . }}-apiserver
        release: {{ .Release.Name }}
        component: apiserver
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      volumes:
        - name: certs
          secret:
            secretName: {{ required "secretName undefined" .Values.secretName }}
            items:
              - key: apiserver-clients-and-nodes-ca.pem
                path: apiserver-clients-and-nodes-ca.pem
              - key: apiserver-clients-ca-key.pem
                path: apiserver-clients-ca-key.pem
              - key: tls-etcd-ca.pem
                path: tls-etcd-ca.pem
              - key: etcd-clients-ca.pem
                path: etcd-clients-ca.pem
              - key: etcd-clients-apiserver.pem
                path: etcd-clients-apiserver.pem
              - key: etcd-clients-apiserver-key.pem
                path: etcd-clients-apiserver-key.pem
              - key: kubelet-clients-apiserver.pem
                path: kubelet-clients-apiserver.pem
              - key: kubelet-clients-apiserver-key.pem
                path: kubelet-clients-apiserver-key.pem
              - key: apiserver-clients-cluster-admin.pem
                path: kube-client.pem
              - key: apiserver-clients-cluster-admin-key.pem
                path: kube-client.key
              - key: tls-ca.pem
                path: tls-ca.pem
              - key: tls-apiserver.pem
                path: tls-apiserver.pem
              - key: tls-apiserver-key.pem
                path: tls-apiserver-key.pem
              - key: aggregation-ca.pem
                path: aggregation-ca.pem
              - key: aggregation-aggregator.pem
                path: aggregation-aggregator.pem
              - key: aggregation-aggregator-key.pem
                path: aggregation-aggregator-key.pem
{{- if .Values.api.sniCertSecret }}
        - name: sni-certs
          secret:
            secretName: {{ .Values.api.sniCertSecret }}
{{- end }}
        - name: wormhole-certs
          secret:
            secretName: {{ required "secretName undefined" .Values.secretName }}
            items:
              - key: tls-ca.pem
                path: tls-ca.pem
              - key: tls-wormhole.pem
                path: tls-wormhole.pem
              - key: tls-wormhole-key.pem
                path: tls-wormhole-key.pem
              - key: apiserver-nodes-ca.pem
                path: apiserver-nodes-ca.pem
              #Todo: Replace with wormhole client cert but that needs some RBAC seeding
              - key: apiserver-clients-cluster-admin.pem
                path: kube-client.pem
              - key: apiserver-clients-cluster-admin-key.pem
                path: kube-client.key

        {{- if .Values.openstack }}
        - name: cloudprovider
          secret:
            secretName: {{ include "master.fullname" . }}-generated
            items:
              - key: openstack.config
                path: openstack.config
        {{- end }}
        - name: bootstrap
          secret:
            secretName: {{ include "master.fullname" . }}-generated
            items:
              - key: token.csv
                path: token.csv
        - name: config
          configMap:
            name: {{ include "master.fullname" . }}
{{- if and (.Values.etcd.backup.enabled) (semverCompare "< 1.19" .Values.version.kubernetes) }}
        - name: liveness-probe
          configMap:
            name: {{ include "master.fullname" . }}
            defaultMode: 0700
            items:
              - key: api-liveness-probe.py
                path: api-liveness-probe.py
{{- end }}
        - name: wormhole-config
          configMap:
            name: {{ include "master.fullname" . }}
            items:
              - key: local-kubeconfig
                path: kubeconfig
        {{- if .Values.audit }}
        - name: audit-policy
          configMap:
            name: {{ include "master.fullname" . }}
            items:
              - key: audit-policy.yaml
                path: audit-policy.yaml
        - name: logs
          emptyDir: {}
        {{- end }}
      initContainers:
        - name: etcd-wait
          image: "{{ include "etcd.image" . }}"
          command:
            - sh
            - -c
          args:
{{- if .Values.etcd.secure.enabled }}
            - until etcdctl --endpoints https://{{ include "etcd.fullname" . }}:2379 --cacert=/etc/kubernetes/certs/tls-etcd-ca.pem --cert=/etc/kubernetes/certs/etcd-clients-apiserver.pem --key=/etc/kubernetes/certs/etcd-clients-apiserver-key.pem --insecure-transport=false endpoint health; do sleep 5; done;
          env:
            - name: ETCDCTL_API
              value: "3"
          volumeMounts:
            - mountPath: /etc/kubernetes/certs
              name: certs
              readOnly: true
{{- else }}
            - until etcdctl --total-timeout=4s --endpoints http://{{ include "etcd.fullname" . }}:2379 cluster-health; do sleep 5; done;
{{- end }}
{{- if and (semverCompare ">= 1.22" .Values.version.kubernetes) .Values.audit }}
        - name: auditlog-permission-fix
          image: "{{ include "fluentd.image" . }}"
          command:
            - sh
            - -c
          args:
            - touch /var/log/audit.log && chmod 644 /var/log/audit.log
          volumeMounts:
            - mountPath: /var/log
              name: logs
{{- end}}
      containers:
        - name: apiserver
          ports:
          - containerPort: 443
            name: server
            protocol: TCP
{{- if (semverCompare ">= 1.19" .Values.version.kubernetes) }}
          image: {{ include "apiserver.image" . | quote }}
{{- else }}
          image: {{ include "hyperkube.image" . | quote }}
{{- end }}
          args:
{{- if (semverCompare "< 1.17" .Values.version.kubernetes) }}
            - /hyperkube
{{- end }}
{{- if (semverCompare ">= 1.15" .Values.version.kubernetes) }}
            - kube-apiserver
{{- else }}
            - apiserver
{{- end }}
            {{- if .Values.etcd.secure.enabled }}
            - --etcd-servers=https://{{ include "etcd.fullname" . }}:2379
            {{- else }}
            - --etcd-servers=http://{{ include "etcd.fullname" . }}:2379
            {{- end }}
            - --secure-port={{ required "missing advertisePort" .Values.advertisePort }}
            - --advertise-address={{ .Values.advertiseAddress }}
            - --allow-privileged=true
            - --authorization-mode=Node,RBAC
            {{- if .Values.openstack }}
            {{- if (semverCompare "< 1.20" .Values.version.kubernetes) }}
            - --cloud-config=/etc/kubernetes/cloudprovider/openstack.config
            - --cloud-provider=openstack
            {{- else }}
            - --cloud-provider=external
            {{- end }}
            {{- end }}
{{- if (semverCompare ">= 1.8" .Values.version.kubernetes) }}
            - --enable-bootstrap-token-auth=true
            - --external-hostname={{ required "missing .api.apiserverHost" .Values.api.apiserverHost }}
{{- else }}{{/* 1.7 */}}
            - --experimental-bootstrap-token-auth=true
            - --runtime-config=rbac.authorization.k8s.io/v1alpha1,extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true
{{- end }}
            - --token-auth-file=/etc/kubernetes/bootstrap/token.csv
            - --service-cluster-ip-range={{ .Values.serviceCIDR }}
            - --kubelet-preferred-address-types=InternalIP
{{- if (semverCompare ">= 1.10" .Values.version.kubernetes) }}
            - --enable-admission-plugins=ExtendedResourceToleration
            # Aggregation Layer
            - --requestheader-client-ca-file=/etc/kubernetes/certs/aggregation-ca.pem
            - --requestheader-allowed-names=aggregator
            - --requestheader-extra-headers-prefix=X-Remote-Extra-
            - --requestheader-group-headers=X-Remote-Group
            - --requestheader-username-headers=X-Remote-User
            - --proxy-client-cert-file=/etc/kubernetes/certs/aggregation-aggregator.pem
            - --proxy-client-key-file=/etc/kubernetes/certs/aggregation-aggregator-key.pem
            - --enable-aggregator-routing=true
{{- else }}{{/* < 1.10 */}}
            - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
            - --tls-ca-file=/etc/kubernetes/certs/tls-ca.pem
{{- end }}
{{- if and (semverCompare ">= 1.13" .Values.version.kubernetes) (semverCompare "< 1.20" .Values.version.kubernetes) }}
            - --enable-admission-plugins=PersistentVolumeLabel
{{- end }}
{{- if (semverCompare ">= 1.14" .Values.version.kubernetes) }}
{{- if (semverCompare "< 1.17" .Values.version.kubernetes) }}
            - --feature-gates=NodeLease=false
{{- end }}
{{- else if (semverCompare ">= 1.12" .Values.version.kubernetes) }}
            # https://github.com/kubernetes/kubernetes/issues/85867
            - --feature-gates=ValidateProxyRedirects=true
{{- end }}
{{- if and (.Values.openstack) (semverCompare ">= 1.20" .Values.version.kubernetes) (semverCompare "< 1.26" .Values.version.kubernetes)}}
            - --feature-gates=CSIMigration=true,CSIMigrationOpenStack=true,ExpandCSIVolumes=true
{{- end }}
            #Cert Spratz
            - --client-ca-file=/etc/kubernetes/certs/apiserver-clients-and-nodes-ca.pem
            - --etcd-cafile=/etc/kubernetes/certs/tls-etcd-ca.pem
            - --etcd-certfile=/etc/kubernetes/certs/etcd-clients-apiserver.pem
            - --etcd-keyfile=/etc/kubernetes/certs/etcd-clients-apiserver-key.pem
            - --kubelet-client-certificate=/etc/kubernetes/certs/kubelet-clients-apiserver.pem
            - --kubelet-client-key=/etc/kubernetes/certs/kubelet-clients-apiserver-key.pem
            - --service-account-key-file=/etc/kubernetes/certs/apiserver-clients-ca-key.pem
            - --tls-cert-file=/etc/kubernetes/certs/tls-apiserver.pem
            - --tls-private-key-file=/etc/kubernetes/certs/tls-apiserver-key.pem
{{- if (semverCompare ">= 1.13" .Values.version.kubernetes) }}
            - --service-account-issuer=https://{{ required "missing .api.apiserverHost" .Values.api.apiserverHost }}
            - --service-account-signing-key-file=/etc/kubernetes/certs/apiserver-clients-ca-key.pem
            - --api-audiences=kubernetes
{{- end }}
{{- if .Values.api.sniCertSecret }}
            - --tls-sni-cert-key=/etc/kubernetes/sni-certs/tls.crt,/etc/kubernetes/sni-certs/tls.key
{{- end }}
{{- if .Values.api.corsAllowedOrigins }}
            - --cors-allowed-origins={{ .Values.api.corsAllowedOrigins }}
{{- end }}
            {{ if or .Values.dex.enabled .Values.api.oidc.issuerURL }}
            - --oidc-issuer-url={{ default  (printf "https://%s" (include "dex.url" .)) .Values.api.oidc.issuerURL }}
            - --oidc-client-id={{ .Values.api.oidc.clientID }}
            - --oidc-groups-claim={{ .Values.api.oidc.groupsClaim }}
            - --oidc-username-prefix={{ .Values.api.oidc.usernamePrefix }}
            - --oidc-username-claim={{ .Values.api.oidc.usernameClaim }}
            {{ end }}
            {{- if .Values.audit }}
            - --audit-policy-file=/audit/audit-policy.yaml
            - --audit-log-path=/var/log/audit.log
            - --audit-log-maxage=1
            - --audit-log-maxbackup=1
            {{- end }}
{{- if (semverCompare ">= 1.22" .Values.version.kubernetes) }}
            - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
{{- else }}
            - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
{{- end }}
          volumeMounts:
            - mountPath: /etc/kubernetes/certs
              name: certs
              readOnly: true
{{- if .Values.api.sniCertSecret }}
            - mountPath: /etc/kubernetes/sni-certs
              name: sni-certs
              readOnly: true
{{- end }}
            {{- if .Values.openstack }}
            - mountPath: /etc/kubernetes/cloudprovider
              name: cloudprovider
              readOnly: true
            {{- end }}
            - mountPath: /etc/kubernetes/bootstrap
              name: bootstrap
              readOnly: true
{{- if and (.Values.etcd.backup.enabled) (semverCompare "< 1.19" .Values.version.kubernetes) }}
            - mountPath: /liveness-probe
              name: liveness-probe
{{- end }}
            {{- if .Values.audit }}
            - mountPath: /audit
              name: audit-policy
              readOnly: true
            - mountPath: /var/log
              name: logs
            {{- end}}
          livenessProbe:
{{- if .Values.etcd.backup.enabled }}
            exec:
              command:
            {{- if (semverCompare ">= 1.19" .Values.version.kubernetes) }}
                - /api-liveness
            {{- else }}
                - /liveness-probe/api-liveness-probe.py
            {{- end }}
{{- else }}
            httpGet:
              path: /healthz
              port: {{ .Values.advertisePort }}
              scheme: HTTPS
{{- end }}
            initialDelaySeconds: 5
            periodSeconds: 60
            failureThreshold: 2
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.advertisePort }}
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 3
          env:
            - name: ETCD_HOST
              value: {{ include "etcd.fullname" . }}
            - name: ETCD_BACKUP_PORT
              value: "8080"
          resources:
{{ toYaml .Values.api.resources | indent 12 }}
        - name: wormhole
          image: {{ include "wormhole.image" . | quote }}
          command:
            - sh
            - -ec
            - |
              cp /etc/kubernetes/certs/tls-wormhole.pem /tmp/tls-wormhole.livenessprobe
              exec wormhole server --kubeconfig=/etc/kubernetes/config/kubeconfig \
              --ca=/etc/kubernetes/certs/apiserver-nodes-ca.pem \
              --cert=/etc/kubernetes/certs/tls-wormhole.pem \
              --key=/etc/kubernetes/certs/tls-wormhole-key.pem \
              --service-cidr={{ .Values.serviceCIDR }} \
              --api-port={{ .Values.advertisePort }} \
              --v=5
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - mountPath: /etc/kubernetes/certs/
              name: wormhole-certs
              readOnly: true
            - mountPath: /etc/kubernetes/config
              name: wormhole-config
              readOnly: true
          livenessProbe:
            exec:
              command:
              - cmp
              - -s
              - /etc/kubernetes/certs/tls-wormhole.pem
              - /tmp/tls-wormhole.livenessprobe
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 3
        {{- if .Values.audit }}
        - name: fluentd
          image: {{ include "fluentd.image" . | quote }}
          resources:
            requests:
              ephemeral-storage: "2Gi"
          args: ["--suppress-config-dump"]
          env:
          {{- if eq .Values.audit "elasticsearch" }}
          - name: ELK_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-elk
                key: elk-username
          - name: ELK_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-elk
                key: elk-password
          - name: ELK_HOSTS
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-elk
                key: elk-hosts
          - name: ELK_INDEX
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-elk
                key: elk-index
          {{- end }}
          {{- if eq .Values.audit "swift" }}
          - name: OS_AUTH_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-auth-url
          - name: OS_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-username
          - name: OS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-password
          - name: OS_PROJECT_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-project-id
          - name: OS_USER_DOMAIN_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-user-domain-id
          - name: OS_PROJECT_DOMAIN_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-project-domain-id
          - name: OS_REGION
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-secret
                key: openstack-region
          {{- end}}
          {{- if eq .Values.audit "http" }}
          - name: HTTP_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-http
                key: http-username
          - name: HTTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-http
                key: http-password
          - name: HTTP_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: {{ include "master.fullname" . }}-http
                key: http-endpoint
          {{- end }}
          volumeMounts:
            - mountPath: /fluentd/etc
              name: config
              readOnly: true
            - mountPath: /var/log
              name: logs
        {{- end }}
